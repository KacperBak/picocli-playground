/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.kacperbak.picocli.playground;

import de.kacperbak.picocli.playground.commands.HelloCommand;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import picocli.CommandLine;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.*;

/**
 * More details on testing picocli:
 * https://picocli.info/#_testing_the_output
 */
class HelloCommandTest {

    final PrintStream originalOut = System.out;
    final PrintStream originalErr = System.err;
    final ByteArrayOutputStream out = new ByteArrayOutputStream();
    final ByteArrayOutputStream err = new ByteArrayOutputStream();

    @BeforeEach
    public void setUpStreams() {
        out.reset();
        err.reset();
        System.setOut(new PrintStream(out));
        System.setErr(new PrintStream(err));
    }

    @AfterEach
    public void restoreStreams() {
        System.setOut(originalOut);
        System.setErr(originalErr);
    }


    /**
     * Calling: ./app/bin/app
     * Results in:
     * -------------------
     * <your message here>
     * -------------------
     *   .
     *    .
     *     .
     *     __  __   __  __   ______  __   __
     *    /\ \/\ \ /\ \/\ \ /\__  _\/\ \ /\ \
     *    \ \ \ \ \\ \ `\\ \\/_/\ \/\ `\`\/'/'
     *     \ \ \ \ \\ \ , ` \  \ \ \ `\/ > <
     *      \ \ \_\ \\ \ \`\ \  \_\ \__ \/'/\`\
     *       \ \_____\\ \_\ \_\ /\_____\/\_\\ \_\
     *        \/_____/ \/_/\/_/ \/_____/\/_/ \/_/
     */
    @Test
    void test_NoOptions_NoParams() {

        // given
        String expected = "<your message here>";

        // when
        String[] args = new String [0];
        new CommandLine(new HelloCommand()).execute(args);

        // then
        assertTrue(out.toString().contains(expected));
        assertEquals("", err.toString());
    }

    /**
     * Calling: ./app/bin/app 'asdf'
     * Results in:
     * ----
     * asdf
     * ----
     *   .
     *    .
     *     .
     *     __  __   __  __   ______  __   __
     *    /\ \/\ \ /\ \/\ \ /\__  _\/\ \ /\ \
     *    \ \ \ \ \\ \ `\\ \\/_/\ \/\ `\`\/'/'
     *     \ \ \ \ \\ \ , ` \  \ \ \ `\/ > <
     *      \ \ \_\ \\ \ \`\ \  \_\ \__ \/'/\`\
     *       \ \_____\\ \_\ \_\ /\_____\/\_\\ \_\
     *        \/_____/ \/_/\/_/ \/_____/\/_/ \/_/
     */
    @Test
    void test_NoOptions_OneMessageParam() {

        // given
        String expected = "asdf";

        // when
        String[] args = {"asdf"};
        new CommandLine(new HelloCommand()).execute(args);

        // then
        assertTrue(out.toString().contains(expected));
        assertEquals("", err.toString());
    }

    /**
     * Calling: ./app/bin/app -cw 'asdf'
     * Results in:
     * ----
     * asdf
     * ----
     *   .
     *    .
     *     says the Cow...
     *      .
     *       .
     *        ^__^
     *        (oo)\_______
     *        (__)\       )\/\
     *            ||----w |
     *            ||     ||
     */
    @Test
    void test_CwOption_OneMessageParam() {

        // given
        String expectedMessage = "asdf";
        String expectedSaying = "says the Cow";

        // when
        String[] args = {"-cw", "asdf"};
        new CommandLine(new HelloCommand()).execute(args);

        // then
        assertTrue(out.toString().contains(expectedMessage));
        assertTrue(out.toString().contains(expectedSaying));
        assertEquals("", err.toString());
    }

    /**
     * Calling: ./app/bin/app -tx 'asdf'
     * Results in:
     * ----
     * asdf
     * ----
     *   .
     *    .
     *     says the Tux ...
     *      .
     *       .
     *           .--.
     *          |o_o |
     *          |:_/ |
     *         //   \ \
     *        (|     | )
     *       /'\_   _/`\
     *       \___)=(___/
     */
    @Test
    void test_TxOption_OneMessageParam() {

        // given
        String expectedMessage = "asdf";
        String expectedSaying = "says the Tux";

        // when
        String[] args = {"-tx", "asdf"};
        new CommandLine(new HelloCommand()).execute(args);

        // then
        assertTrue(out.toString().contains(expectedMessage));
        assertTrue(out.toString().contains(expectedSaying));
        assertEquals("", err.toString());
    }
}
